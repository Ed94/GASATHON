// Generated by GasaGen/GasaGen_UGasaAttributeSet.cpp
#include "GasaAttributeSet.h"
#include "GasaAttributeSet_Inlines.h"
#include "EffectProperties.h"

#include "AbilitySystemComponent.h"
#include "Net/UnrealNetwork.h"
#include "Networking/GasaNetLibrary.h"
#include "GameplayEffectExtension.h"

UGasaAttributeSet::UGasaAttributeSet()
{
	InitHealth( 100.f );
	InitMaxHealth( 100.f );
	InitMana( 50.f );
	InitMaxMana( 50.f );
}

#pragma region Rep Notifies
void UGasaAttributeSet::Client_OnRep_Strength( FGameplayAttributeData& PrevStrength )
{
	// From GAMEPLAYATTRIBUTE_REPNOTIFY
	static FProperty* UGasaAttributeSetProperty = FindFieldChecked<FProperty>( StaticClass(), GET_MEMBER_NAME_CHECKED( UGasaAttributeSet, Strength ) );
	GetOwningAbilitySystemComponentChecked()->SetBaseAttributeValueFromReplication( FGameplayAttribute( UGasaAttributeSetProperty ), Strength, PrevStrength );
}
void UGasaAttributeSet::Client_OnRep_Intelligence( FGameplayAttributeData& PrevIntelligence )
{
	// From GAMEPLAYATTRIBUTE_REPNOTIFY
	static FProperty* UGasaAttributeSetProperty = FindFieldChecked<FProperty>( StaticClass(), GET_MEMBER_NAME_CHECKED( UGasaAttributeSet, Intelligence ) );
	GetOwningAbilitySystemComponentChecked()->SetBaseAttributeValueFromReplication(
	    FGameplayAttribute( UGasaAttributeSetProperty ), Intelligence, PrevIntelligence
	);
}
void UGasaAttributeSet::Client_OnRep_Resilience( FGameplayAttributeData& PrevResilience )
{
	// From GAMEPLAYATTRIBUTE_REPNOTIFY
	static FProperty* UGasaAttributeSetProperty = FindFieldChecked<FProperty>( StaticClass(), GET_MEMBER_NAME_CHECKED( UGasaAttributeSet, Resilience ) );
	GetOwningAbilitySystemComponentChecked()->SetBaseAttributeValueFromReplication(
	    FGameplayAttribute( UGasaAttributeSetProperty ), Resilience, PrevResilience
	);
}
void UGasaAttributeSet::Client_OnRep_Vigor( FGameplayAttributeData& PrevVigor )
{
	// From GAMEPLAYATTRIBUTE_REPNOTIFY
	static FProperty* UGasaAttributeSetProperty = FindFieldChecked<FProperty>( StaticClass(), GET_MEMBER_NAME_CHECKED( UGasaAttributeSet, Vigor ) );
	GetOwningAbilitySystemComponentChecked()->SetBaseAttributeValueFromReplication( FGameplayAttribute( UGasaAttributeSetProperty ), Vigor, PrevVigor );
}
void UGasaAttributeSet::Client_OnRep_Health( FGameplayAttributeData& PrevHealth )
{
	// From GAMEPLAYATTRIBUTE_REPNOTIFY
	static FProperty* UGasaAttributeSetProperty = FindFieldChecked<FProperty>( StaticClass(), GET_MEMBER_NAME_CHECKED( UGasaAttributeSet, Health ) );
	GetOwningAbilitySystemComponentChecked()->SetBaseAttributeValueFromReplication( FGameplayAttribute( UGasaAttributeSetProperty ), Health, PrevHealth );
}
void UGasaAttributeSet::Client_OnRep_MaxHealth( FGameplayAttributeData& PrevMaxHealth )
{
	// From GAMEPLAYATTRIBUTE_REPNOTIFY
	static FProperty* UGasaAttributeSetProperty = FindFieldChecked<FProperty>( StaticClass(), GET_MEMBER_NAME_CHECKED( UGasaAttributeSet, MaxHealth ) );
	GetOwningAbilitySystemComponentChecked()->SetBaseAttributeValueFromReplication( FGameplayAttribute( UGasaAttributeSetProperty ), MaxHealth, PrevMaxHealth );
}
void UGasaAttributeSet::Client_OnRep_Mana( FGameplayAttributeData& PrevMana )
{
	// From GAMEPLAYATTRIBUTE_REPNOTIFY
	static FProperty* UGasaAttributeSetProperty = FindFieldChecked<FProperty>( StaticClass(), GET_MEMBER_NAME_CHECKED( UGasaAttributeSet, Mana ) );
	GetOwningAbilitySystemComponentChecked()->SetBaseAttributeValueFromReplication( FGameplayAttribute( UGasaAttributeSetProperty ), Mana, PrevMana );
}
void UGasaAttributeSet::Client_OnRep_MaxMana( FGameplayAttributeData& PrevMaxMana )
{
	// From GAMEPLAYATTRIBUTE_REPNOTIFY
	static FProperty* UGasaAttributeSetProperty = FindFieldChecked<FProperty>( StaticClass(), GET_MEMBER_NAME_CHECKED( UGasaAttributeSet, MaxMana ) );
	GetOwningAbilitySystemComponentChecked()->SetBaseAttributeValueFromReplication( FGameplayAttribute( UGasaAttributeSetProperty ), MaxMana, PrevMaxMana );
}
#pragma endregion Rep Notifies

void UGasaAttributeSet::PostGameplayEffectExecute( FGameplayEffectModCallbackData const& Data )
{
	Super::PostGameplayEffectExecute( Data );
	FEffectProperties Props;
	Props.Populate( Data );

	if ( Data.EvaluatedData.Attribute == GetStrengthAttribute() )
	{
		SetStrength( FMath::Clamp( GetStrength(), 0, 999.000000 ) );
	}
	if ( Data.EvaluatedData.Attribute == GetIntelligenceAttribute() )
	{
		SetIntelligence( FMath::Clamp( GetIntelligence(), 0, 999.000000 ) );
	}
	if ( Data.EvaluatedData.Attribute == GetResilienceAttribute() )
	{
		SetResilience( FMath::Clamp( GetResilience(), 0, 999.000000 ) );
	}
	if ( Data.EvaluatedData.Attribute == GetVigorAttribute() )
	{
		SetVigor( FMath::Clamp( GetVigor(), 0, 999.000000 ) );
	}
	if ( Data.EvaluatedData.Attribute == GetHealthAttribute() )
	{
		SetHealth( FMath::Clamp( GetHealth(), 0, GetMaxHealth() ) );
	}
	if ( Data.EvaluatedData.Attribute == GetMaxHealthAttribute() )
	{
		SetMaxHealth( FMath::Clamp( GetMaxHealth(), 0, 99999.000000 ) );
	}
	if ( Data.EvaluatedData.Attribute == GetManaAttribute() )
	{
		SetMana( FMath::Clamp( GetMana(), 0, GetMaxMana() ) );
	}
	if ( Data.EvaluatedData.Attribute == GetMaxManaAttribute() )
	{
		SetMaxMana( FMath::Clamp( GetMaxMana(), 0, 99999.000000 ) );
	}

	PostAttributeChange_Custom();
}

void UGasaAttributeSet::PreAttributeChange( FGameplayAttribute const& Attribute, float& NewValue )
{
	Super::PreAttributeChange( Attribute, NewValue );

	if ( Attribute == GetStrengthAttribute() )
	{
		NewValue = FMath::Clamp( NewValue, 0, 999.000000 );
	}
	if ( Attribute == GetIntelligenceAttribute() )
	{
		NewValue = FMath::Clamp( NewValue, 0, 999.000000 );
	}
	if ( Attribute == GetResilienceAttribute() )
	{
		NewValue = FMath::Clamp( NewValue, 0, 999.000000 );
	}
	if ( Attribute == GetVigorAttribute() )
	{
		NewValue = FMath::Clamp( NewValue, 0, 999.000000 );
	}
	if ( Attribute == GetHealthAttribute() )
	{
		NewValue = FMath::Clamp( NewValue, 0, GetMaxHealth() );
	}
	if ( Attribute == GetMaxHealthAttribute() )
	{
		NewValue = FMath::Clamp( NewValue, 0, 99999.000000 );
	}
	if ( Attribute == GetManaAttribute() )
	{
		NewValue = FMath::Clamp( NewValue, 0, GetMaxMana() );
	}
	if ( Attribute == GetMaxManaAttribute() )
	{
		NewValue = FMath::Clamp( NewValue, 0, 99999.000000 );
	}

	PreAttributeChange_Custom();
}

void UGasaAttributeSet::GetLifetimeReplicatedProps( TArray<FLifetimeProperty>& OutLifetimeProps ) const
{
	Super::GetLifetimeReplicatedProps( OutLifetimeProps );

	DOREPLIFETIME_DEFAULT_GAS( UGasaAttributeSet, Strength );
	DOREPLIFETIME_DEFAULT_GAS( UGasaAttributeSet, Intelligence );
	DOREPLIFETIME_DEFAULT_GAS( UGasaAttributeSet, Resilience );
	DOREPLIFETIME_DEFAULT_GAS( UGasaAttributeSet, Vigor );
	DOREPLIFETIME_DEFAULT_GAS( UGasaAttributeSet, Health );
	DOREPLIFETIME_DEFAULT_GAS( UGasaAttributeSet, MaxHealth );
	DOREPLIFETIME_DEFAULT_GAS( UGasaAttributeSet, Mana );
	DOREPLIFETIME_DEFAULT_GAS( UGasaAttributeSet, MaxMana );
}
